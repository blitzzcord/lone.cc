local function getnamecall()
    if game.PlaceId == 2788229376 then
        return "UpdateMousePos"
    elseif game.PlaceId == 5602055394 or game.PlaceId == 7951883376 then
        return "MousePos"
    elseif game.PlaceId == 9825515356 then
        return "GetMousePos"
    end
end

local namecalltype = getnamecall()

function MainEventLocate()
    for _,v in pairs(game:GetService("ReplicatedStorage"):GetDescendants()) do
        if v.Name == "MainEvent" then
            return v
        end
    end
end

local Players = game:GetService("Players")
local UserInputService = game:GetService("UserInputService")
local RunService = game:GetService("RunService")
local Camera = workspace.CurrentCamera
local Toggle = getgenv().lone.Key360.Toggle
local RotationSpeed = getgenv().lone.Key360.RotationSpeed
local Keybind = getgenv().lone.Key360.Keybind

local function OnKeyPress(Input, GameProcessedEvent)
    if not GameProcessedEvent then 
        if Input.KeyCode == Keybind then
            Toggle = not Toggle
        elseif Input.KeyCode == Enum.KeyCode[CamMain.UnlockKey:upper()] then
            if CToggle then
                CToggle = false
                CTarget = nil
                if Main.Notifications then
                    SendNotification("unlocked")
                end
            end
        end
    end
end

UserInputService.InputBegan:Connect(OnKeyPress)

local LastRenderTime = 0
local FullCircleRotation = 2 * math.pi
local TotalRotation = 0

local function RotateCamera()
    if Toggle then
        local CurrentTime = tick()
        local TimeDelta = math.min(CurrentTime - LastRenderTime, 0.01)
        LastRenderTime = CurrentTime

        local Rotation = CFrame.fromAxisAngle(Vector3.new(0, 1, 0), math.rad(RotationSpeed * TimeDelta))
        Camera.CFrame = Camera.CFrame * Rotation

        TotalRotation = TotalRotation + math.rad(RotationSpeed * TimeDelta)
        if TotalRotation >= FullCircleRotation then
            Toggle = false
            TotalRotation = 0
        end
    end
end

RunService.RenderStepped:Connect(RotateCamera)

local mainevent = MainEventLocate()

local lone = getgenv().lone
local Main = lone.General
local CamMain = lone.Camlock.Main
local CamFOV = lone.Camlock.FOV
local SilentMain = lone.Silent.Main
local SilentFOV = lone.Silent.FOV
local Trace = lone.Tracer
local AutoPred = lone.AutoPrediction

-- Hood custom bypasses
for _, con in next, getconnections(workspace.CurrentCamera.Changed) do
    task.wait()
    con:Disable()
end
for _, con in next, getconnections(workspace.CurrentCamera:GetPropertyChangedSignal("CFrame")) do
    task.wait()
    con:Disable()
end

-- Adonis bypass
for i,v in next, getgc(true) do
    if type(v) == "table" then
        if type(rawget(v,"indexInstance")) == "table" and v.indexInstance[1] == "kick" then
            v.indexInstance[2] = function()
                warn("Bypassed Adonis::MainModule/Client/Core/Anti.lua :: Thread Yielded")
                return coroutine.yield()
            end
        end
    end
end

local vect3 = Vector3.new
local vect2 = Vector2.new
local cnew = CFrame.new

local NotificationHolder = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Module.Lua"))()
local Notification = loadstring(game:HttpGet("https://raw.githubusercontent.com/BocusLuke/UI/main/STX/Client.Lua"))()

local uis = game:GetService("UserInputService")
local rs = game:GetService("RunService")
local plrs = game:GetService("Players")
local ws = game:GetService("Workspace")

local CToggle = false
local lplr = plrs.LocalPlayer
local CTarget = nil
local CPart = nil
local SToggle = false
local STarget = nil
local SPart = nil

local m = lplr:GetMouse()
local c = ws.CurrentCamera

local function SendNotification(text)
    Notification:Notify(
        {Title = "VERSION 3", Description = "lone.cc - "..text},
        {OutlineColor = Color3.fromRGB(255,215,255),Time = 2, Type = "image"},
        {Image = "rbxassetid://18592190366", ImageColor = Color3.fromRGB(0,0,0)}
    )
end 

-- Call notification function
if Main.Notifications then
    SendNotification("lone Is Loading")
    wait(3.5)
    SendNotification("Successfully Loaded lone")
end

local CamlockFOV = Drawing.new("Circle")
CamlockFOV.Visible = CamFOV.ShowFOV
CamlockFOV.Thickness = 1
CamlockFOV.NumSides = 30
CamlockFOV.Radius = CamFOV.Radius * 3
CamlockFOV.Color = CamFOV.Color
CamlockFOV.Filled = CamFOV.Filled
CamlockFOV.Transparency = CamFOV.Transparency

local SilentFOV = Drawing.new("Circle")
SilentFOV.Visible = SilentFOV.ShowFOV
SilentFOV.Thickness = 1
SilentFOV.NumSides = 30
SilentFOV.Radius = SilentFOV.Radius * 3
SilentFOV.Color = SilentFOV.Color
SilentFOV.Filled = SilentFOV.Filled
SilentFOV.Transparency = SilentFOV.Transparency

local function FindTawget() 
    local d, t = math.huge, nil
    for _,v in pairs(plrs:GetPlayers()) do
        local _,os = c:WorldToViewportPoint(v.Character.PrimaryPart.Position)
        if v ~= lplr and v.Character and v.Character:FindFirstChild("Humanoid") and v.Character.Humanoid.Health ~= 0 and v.Character:FindFirstChild("HumanoidRootPart") and os then
            local pos = c:WorldToViewportPoint(v.Character.PrimaryPart.Position)
            local magnitude = (vect2(pos.X, pos.Y) - vect2(m.X, m.Y + 36)).magnitude
            if magnitude < d then
                t = v
                d = magnitude
            end
        end
    end
    return t
end

local function FindPart() 
    local d, p = math.huge, nil
    if CTarget then
        for _,v in pairs(CTarget.Character:GetChildren()) do
            if table.find(CamMain.Parts, v.Name) then
                local pos = c:WorldToViewportPoint(v.Position)
                local Magn = (vect2(m.X, m.Y + 36) - vect2(pos.X, pos.Y)).Magnitude
                if Magn < d then
                    d = Magn
                    p = v
                end
            end
        end
        return p.Name
    end
end

local function FindSilentPart() 
    local d, p = math.huge, nil
    if CTarget then
        for _,v in pairs(CTarget.Character:GetChildren()) do
            if table.find(SilentMain.Parts, v.Name) then
                local pos = c:WorldToViewportPoint(v.Position)
                local Magn = (vect2(m.X, m.Y + 36) - vect2(pos.X, pos.Y)).Magnitude
                if Magn < d then
                    d = Magn
                    p = v
                end
            end
        end
        return p.Name
    end
end

local function CheckAnti(targ) -- // Anti-aim detection
    if (targ.Character.HumanoidRootPart.Velocity.Y < -5 and targ.Character.Humanoid:GetState() ~= Enum.HumanoidStateType.Freefall) or targ.Character.HumanoidRootPart.Velocity.Y < -50 then
        return true
    elseif targ and (targ.Character.HumanoidRootPart.Velocity.X > 35 or targ.Character.HumanoidRootPart.Velocity.X < -35) then
        return true
    elseif targ and targ.Character.HumanoidRootPart.Velocity.Y > 60 then
        return true
    elseif targ and (targ.Character.HumanoidRootPart.Velocity.Z > 35 or targ.Character.HumanoidRootPart.Velocity.Z < -35) then
        return true
    else
        return false
    end
end

local function InSilentRadis(target, section, fov) -- Checks if player is in the fov
    if target then
        local pos = nil
        if not CheckAnti(target) then
            pos = c:WorldToViewportPoint(target.Character.PrimaryPart.Position + target.Character.PrimaryPart.Velocity * section.Prediction)
        else
            pos = c:WorldToViewportPoint(target.Character.PrimaryPart.Position + ((target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed) * section.Prediction))
        end
        local mag = (vect2(m.X, m.Y + 36) - vect2(pos.X, pos.Y)).Magnitude
        if mag < fov * 3 then
            return true
        else
            return false
        end
    end
end

local function Silent()
    if STarget then
        if SPart and InSilentRadis(STarget, SilentMain, SilentFOV.Radius) then
            if not CheckAnti(STarget) then
                mainevent:FireServer(namecalltype, STarget.Character[SPart].Position + (STarget.Character[SPart].Velocity * SilentMain.Prediction))
            else
                mainevent:FireServer(namecalltype, STarget.Character[SPart].Position + ((STarget.Character.Humanoid.MoveDirection * STarget.Character.Humanoid.WalkSpeed) * SilentMain.Prediction))
            end
        end
    end
end

local function InRadis(target, section, fov) -- Checks if player is in the fov
    if target then
        if CamFOV.UseFOV then
            local pos = nil
            if not CheckAnti(target) then
                pos = c:WorldToViewportPoint(target.Character.PrimaryPart.Position + target.Character.PrimaryPart.Velocity * section.Prediction)
            else
                pos = c:WorldToViewportPoint(target.Character.PrimaryPart.Position + ((target.Character.Humanoid.MoveDirection * target.Character.Humanoid.WalkSpeed) * section.Prediction))
            end
            local mag = (vect2(m.X, m.Y + 36) - vect2(pos.X, pos.Y)).Magnitude
            if mag < fov * 3 then
                return true
            else
                return false
            end
        else
            return true
        end
    end
end

uis.InputBegan:Connect(function(k, t)
    if not t then
        if k.KeyCode == Enum.KeyCode[CamMain.Key:upper()] then
            CToggle = not CToggle
            if CToggle then
                CTarget = FindTawget()
                if Main.Notifications and CTarget then
                    SendNotification("locked onto "..CTarget.Name)
                end
            else
                CTarget = nil
                if Main.Notifications then
                    SendNotification("unlocked")
                end
            end
        elseif k.KeyCode == Enum.KeyCode[SilentMain.Toggle:upper()] and SilentMain == "Regular" then
            SToggle = not SToggle
            if Main.Notifications then
                SendNotification(SToggle and "silent enabled" or "silent disabled")
            end
        end
    end
end)

rs.RenderStepped:Connect(function()
    if CTarget then
        CPart = FindPart()
        local pos = nil
        local cum = nil
        if CTarget.Character.BodyEffects["K.O"].Value == true or lplr.Character.BodyEffects["K.O"].Value == true then
            CToggle = false
            CTarget = nil
        else
            if CamMain.Shake then
                if CamMain.PredictMovement then
                    if not CheckAnti(CTarget) then
                        cum = CTarget.Character[CPart].Position + CTarget.Character[CPart].Velocity * CamMain.Prediction + (vect3(
                            math.random(-CamMain.ShakeValue, CamMain.ShakeValue),
                            math.random(-CamMain.ShakeValue, CamMain.ShakeValue),
                            math.random(-CamMain.ShakeValue, CamMain.ShakeValue)
                        ) * 0.1)
                    else
                        cum = CTarget.Character[CPart].Position + ((CTarget.Character.Humanoid.MoveDirection * CTarget.Character.Humanoid.WalkSpeed) * CamMain.Prediction + (vect3(
                            math.random(-CamMain.ShakeValue, CamMain.ShakeValue),
                            math.random(-CamMain.ShakeValue, CamMain.ShakeValue),
                            math.random(-CamMain.ShakeValue, CamMain.ShakeValue)
                        ) * 0.1))
                    end
                    pos = c:WorldToViewportPoint(cum)
                else
                    cum = CTarget.Character[CPart].Position + (vect3(
                        math.random(-CamMain.ShakeValue, CamMain.ShakeValue),
                        math.random(-CamMain.ShakeValue, CamMain.ShakeValue),
                        math.random(-CamMain.ShakeValue, CamMain.ShakeValue)
                    ) * 0.1)
                    pos = c:WorldToViewportPoint(cum)
                end
            else
                if CamMain.PredictMovement then
                    if not CheckAnti(CTarget) then
                        cum = CTarget.Character[CPart].Position + CTarget.Character[CPart].Velocity * CamMain.Prediction
                    else
                        cum = CTarget.Character[CPart].Position + ((CTarget.Character.Humanoid.MoveDirection * CTarget.Character.Humanoid.WalkSpeed) * CamMain.Prediction)
                    end
                    pos = c:WorldToViewportPoint(cum)
                else
                    cum = CTarget.Character[CPart].Position
                    pos = c:WorldToViewportPoint(cum)
                end
            end
            if InRadis(CTarget, CamMain, CamlockFOV.Radius) then
                local main = nil
                if CamMain.SmoothLock then
                    main = cnew(c.CFrame.p, cum)
                    c.CFrame = c.CFrame:Lerp(main, CamMain.Smoothness, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut)
                else
                    c.CFrame = cnew(c.CFrame.p, cum)
                end
            end
            if Main.FOVMode == "Mouse" then
                if CamFOV.ShowFOV then
                    CamlockFOV.Position = vect2(m.X, m.Y + 36)
                end
                if SilentFOV.ShowFOV then
                    SilentFOV.Position = vect2(m.X, m.Y + 36)
                end
            elseif Main.FOVMode == "PredictionPoint" then
                if CamFOV.ShowFOV then
                    CamlockFOV.Position = vect2(pos.X, pos.Y)
                end
                if SilentFOV.ShowFOV then
                    SilentFOV.Position = vect2(pos.X, pos.Y)
                end
            end
            if Trace.Enabled then
                Line.Visible = true
                Line.From = vect2(m.X, m.Y + 36)
                Line.To = vect2(pos.X, pos.Y)
            end
        end
    else
        CamlockFOV.Position = vect2(m.X, m.Y + 36)
        SilentFOV.Position = vect2(m.X, m.Y + 36)
        Line.Visible = false
    end
end)

lplr.Character.ChildAdded:Connect(function(tool)
    if tool:IsA("Tool") then
        tool.Activated:connect(function()
            if SilentMain.Mode == "Regular" then
                if SToggle then
                    STarget = FindTawget()
                    if STarget then
                        SPart = FindSilentPart()
                        if SPart then
                            Silent()
                        end
                    end
                end
            elseif SilentMain.Mode == "Target" then
                if CToggle then
                    STarget = CTarget
                    if STarget then
                        SPart = FindSilentPart()
                        if SPart then
                            Silent()
                        end
                    end
                end
            end
        end)
    end
end)

lplr.CharacterAdded:Connect(function(char)
    char.ChildAdded:Connect(function(tool)
        tool.Activated:connect(function()
            if SilentMain.Mode == "Regular" then
                if SToggle then
                    STarget = FindTawget()
                    if STarget then
                        SPart = FindSilentPart()
                        if SPart then
                            Silent()
                        end
                    end
                end
            elseif SilentMain.Mode == "Target" then
                if CToggle then
                    STarget = CTarget
                    if STarget then
                        SPart = FindSilentPart()
                        if SPart then
                            Silent()
                        end
                    end
                end
            end
        end)
    end)
end)
